@page "/tasks"
@using TaskManager.Models
@using TaskManager.UI.Services.Interfaces
@inject ITaskService TaskService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject AppState AppState


<div class="container page-transition mt-4">
    <div class="position: absolute; top: 50px; left: 20px;">
        <button class="btn border border-1 mb-5 p-2" @onclick="GoBack">←</button>

        @code {
            private void GoBack()
            {
                NavigationManager.NavigateTo("/"); // ya da hangi sayfaya dönmesini istiyorsan onu yaz
            }
        }
    </div>

    @if (!string.IsNullOrEmpty(toastMessage))
    {
        <div class="toast show position-fixed bottom-0 end-0 m-3 text-white bg-success shadow" role="alert">
            <div class="d-flex">
                <div class="toast-body">@toastMessage</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="() => toastMessage = null"></button>
            </div>
        </div>
    }

    <h4 class="mb-4">Görev Listesi</h4>

    @if (tasks == null)
    {
        <p>Yükleniyor...</p>
    }
    else if (!tasks.Any())
    {
        <p>Hiç görev yok.</p>
    }
    else
    {
        <table class="table table-bordered table-hover shadow-sm">
            <thead class="table-dark">
                <tr>
                    <th>Başlık</th>
                    <th>Açıklama</th>
                    <th>Bitiş Tarihi</th>
                    <th>Proje</th>
                    <th>Tamamlandı mı?</th>
                    <th style="width: 160px;">İşlemler</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in tasks)
                {
                    <tr>
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.DueDate.ToString("yyyy-MM-dd")</td>
                        <td>@task.Project?.Name</td>
                        <td>@(task.IsCompleted ? "Evet" : "Hayır")</td>
                        <td>
                            <NavLink class="btn btn-sm btn-primary me-2" href="@($"/edit-task/{task.Id}")">Düzenle</NavLink>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteTask(task.Id)">Sil</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

</div>

@code {
    private List<TaskItem>? tasks;
    private string? toastMessage;

    protected override async Task OnInitializedAsync()
    {
        var userId = AppState.CurrentUser?.Id;
        Console.WriteLine($"Giriş yapan kullanıcı: {AppState.CurrentUser?.Email}, ID: {AppState.CurrentUser?.Id}");

        if (!string.IsNullOrEmpty(userId))
        {
            tasks = await TaskService.GetTasksByUserIdAsync(userId);
        }
    }

    private async Task DeleteTask(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Bu görevi silmek istediğinize emin misiniz?");
        if (confirmed)
        {
            var success = await TaskService.DeleteAsync(id);
            if (success)
            {
                tasks = await TaskService.GetAllAsync();
                ShowToast("Görev başarıyla silindi.");
            }
            else
            {
                ShowToast("Görev silinirken bir hata oluştu.", isError: true);
            }
        }
    }

    private void ShowToast(string message, bool isError = false)
    {
        toastMessage = message;
        StateHasChanged();

        _ = Task.Delay(3000).ContinueWith(_ =>
        {
            toastMessage = null;
            InvokeAsync(StateHasChanged);
        });
    }
}
